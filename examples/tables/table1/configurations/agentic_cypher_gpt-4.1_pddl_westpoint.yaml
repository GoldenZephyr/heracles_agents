configurations:
  agentic_cypher_gpt-4.1_pddl_westpoint:
    dsg_interface:
      dsg_interface_type: none
    phases:
      main:
        agent_info:
          max_iterations: 6
          prompt_settings:
            base_prompt:
              answer_formatting_guidance: Use a series of steps to formulate your
                final answer in a chain of thought style. Your final PDDL goal should
                be written between two answer tags, <answer> and </answer>.
              answer_semantic_guidance: null
              in_context_examples: null
              in_context_examples_preamble: null
              novel_instruction: null
              novel_instruction_preamble: 'Now, generate a PDDL goal for this command:'
              novel_instruction_template: '{question}'
              system: 'You are a helpful assistant who is an expert at assigning robots
                PDDL planning goals based on natural language commands grounded in
                3D scene graphs. You have access to a database representing a 3D scene
                graph, which stores spatial information that robot can use to understand
                the world. Given a command, your task is to generate a Cypher query
                that queries the relevant information from the database. Then, use
                this information to formulate a PDDL goal for a robot.

                Labels in Database: - Object: a node representing an object in the
                world. Object Properties: - nodeSymbol: a unique string identifier
                - class: a string identifying the object''s semantic class or type
                - center: the 3D position of the object, as a POINT type - MeshPlace:
                a node representing a 2D segment of space the robot might be able
                to move to. - nodeSymbol: a unique string identifier - class: a string
                identifying the place''s semantic class or type - center: the 3D position
                of the mesh place, as a POINT type - Place: a node representing a
                3D region of free space - nodeSymbol: a unique string identifier -
                center: the 3D position of the place, as a POINT type - Room: a node
                representing a room or higher-level region - nodeSymbol: a unique
                string identifier - center: the 3D position of the room, as a POINT
                type

                Object, MeshPlace, Place, and Room are all Cypher labels attached
                to nodes.

                Places and Mesh Places represent a higher level of the hierarchy compared
                to objects, but lower level than rooms.

                There are two kinds of existing edges. First is (a)-[:CONTAINS]->(b),
                which connects nodes between different layers and means that b is
                contained within a. Nodes in higher levels of the hierarchy may contain
                nodes in lower levels of the hierarchy, but nodes in the lower level
                of the hierarchy will not contain higher-level nodes. The other kind
                of edges represent connectivity within a layer: [:OBJECT_CONNECTED],
                [:PLACE_CONNECTED], [:MESH_PLACE_CONNECTED], [:ROOM_CONNECTED].

                Note that in the current version of cypher, `distance` has been replaced
                by `point.distance`.

                Also, do not use any apoc functions in your queries, because apoc
                is not installed so those queries will crash. Use chain of thought
                to think along the way.

                <PDDL Domain> The PDDL domain consists of the following predicates
                described below. (visited-place ?p): This predicate indicates that
                a robot must visit Place ''?p'' at some point, where ''?p'' is a placeholder
                for a Place ID. (at-place ?p): This predicate indicates that a robot
                must be at Place ''?p'', where ''?p'' is a placeholder for a Place
                ID. (visited-object ?o): This predicate indicates that a robot must
                visit Object ''?o'' at some point, where ''?o'' is a placeholder for
                an Object ID. (at-object ?o): This predicate indicates that a robot
                must be at Object ''?o'', where ''?o'' is a placeholder for an Object
                ID. (safe ?o): This predicate indicates that a robot must inspect
                Object ''?o'', where ''?o'' is a placeholder for an Object ID. (visited-region
                ?r): This predicate indicates that a robot must visit Region ''?r''
                at some point, where ''?r'' is a placeholder for a Region ID. (in-region
                ?r): This predicate indicates that a robot must be at Region ''?r'',
                where ''?r'' is a placeholder for a Region ID. The ''at'' and ''visited''
                predicates are useful for specifying locations for robots to go.

                (holding ?o): This predicates indicates the a robot must be holding
                an Object ''?o'', where ''?o'' is a placeholder for an Object ID.
                The ''holding'' predicate is useful for specifying that a robot should
                pick up an object.

                (object-in-place ?o ?p): This predicate indicates that an Object ''?o''
                must be located inside a Place ''?p'', where ''?o'' is a placeholder
                for an Object ID and ''?p'' is a placeholder for a Place ID. The ''object-in-place''
                predicate is useful for specifying that a robot should place an object
                somewhere. If the robot should move an object from one place to another,
                you should use the ''object-in-place'' predicate for the goal instead
                of the ''holding'' predicate.

                You can compose PDDL goal predicates into more complex goals using
                the following operators: not: the ''not'' operator negates the truth
                value of the predicate. For example ''(not (visited-place r1))'' means
                Region ''r1'' should not be visited. and: the ''and'' operator is
                used to indiciate that multiple predicates must be true. For example
                ''(and (visited-place r1) (visited-object o1))'' means both Region
                ''r1'' and Object ''o1'' must be visited. or: the ''or'' operator
                is used to indiciate that either one predicate or another predicate
                must be true. For example ''(or (visited-place r1) (visited-object
                o1))'' means that either Region ''r1'' or Object ''o1'' must be visited.
                </PDDL Domain>

                Given a 3D Scene Graph and an instruction, use the provided tool to
                query information from the scene graph. When you have enough information,
                submit your final answer.

                '
              tool_description: null
            output_type: PDDL
            sldp_answer_type_hint: false
          tool_interface: openai
          tools:
          - bound_args:
              dsgdb_conf:
                dsg_interface_type: heracles
                uri: neo4j://127.0.0.1:7687
            name: run_cypher_query
        client:
          client_type: openai
          timeout: 120
        model_info:
          model: gpt-4.1
          seed: null
          temperature: 0.2
    pipeline: agentic
    questions:
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Go to object 10.
      question: Go to object 10.
      solution: (visited-object O10)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Visit objects 10 and 12.
      question: Visit objects 10 and 12.
      solution: (and (visited-object O10) (visited-object O12))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Head to place 10 without visiting place 45.
      question: Head to place 10 without visiting place 45.
      solution: (and (visited-place P10) (not (visited-place P45)))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Inspect objects 39, 55, 395, and 397.
      question: Inspect objects 39, 55, 395, and 397.
      solution: (and (safe O39) (safe O55) (safe O395) (safe O397))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Inspect objects 38, 47, and 50 and then move to place 45.
      question: Inspect objects 38, 47, and 50 and then move to place 45.
      solution: (and (safe O38) (safe O47) (safe O50) (at-place P45))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Go to the window.
      question: Go to the window.
      solution: (visited-object O21)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Inspect the trash.
      question: Inspect the trash.
      solution: (safe O54)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Inspect the trash and then go to the window.
      question: Inspect the trash and then go to the window.
      solution: (and (safe O54) (at-object O21))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Move to each door.
      question: Move to each door.
      solution: (and (visited-object O38) (visited-object O47) (visited-object O50))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Checkout each box.
      question: Checkout each box.
      solution: (and (safe O39) (safe O55) (safe O395) (safe O397))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Be by the window.
      question: Be by the window.
      solution: (visited-object O21)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Make the trash safe.
      question: Make the trash safe.
      solution: (safe O54)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Make the trash safe and then i want you by the window.
      question: Make the trash safe and then i want you by the window.
      solution: (and (safe O54) (at-object O21))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: I want each door to have been visited by you.
      question: I want each door to have been visited by you.
      solution: (and (visited-object O38) (visited-object O47) (visited-object O50))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Can you make all of the boxes safe?
      question: Can you make all of the boxes safe?
      solution: (and (safe O39) (safe O55) (safe O395) (safe O397))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: There is one window. go to it.
      question: There is one window. go to it.
      solution: (visited-object O21)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: There is one trash can. inspect it.
      question: There is one trash can. inspect it.
      solution: (safe O54)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: There is one trash can. inspect it and then go to the window.
      question: There is one trash can. inspect it and then go to the window.
      solution: (and (safe O54) (at-object O21))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: There are a few doors. visit each of them.
      question: There are a few doors. visit each of them.
      solution: (and (visited-object O38) (visited-object O47) (visited-object O50))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: The boxes are unsafe. Hamilton, inspect one of them.
      question: The boxes are unsafe. Hamilton, inspect one of them.
      solution: (or (safe O39) (safe O55) (safe O395) (safe O397))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Go to the closest door.
      question: Go to the closest door.
      solution: (visited-object O50)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Move to the farthest door.
      question: Move to the farthest door.
      solution: (visited-object O38)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Inspect the farthest box.
      question: Inspect the farthest box.
      solution: (safe O39)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Checkout the box closest to us.
      question: Checkout the box closest to us.
      solution: (safe O55)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Head to the sign farthest from us.
      question: Head to the sign farthest from us.
      solution: (visited-object O111)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Move to the sign closest to the bag.
      question: Move to the sign closest to the bag.
      solution: (visited-object O42)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Inspect the box closest to the bag.
      question: Inspect the box closest to the bag.
      solution: (safe O39)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Go to the rightmost box.
      question: Go to the rightmost box.
      solution: (visited-object O39)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Head to the leftmost sign.
      question: Head to the leftmost sign.
      solution: (visited-object O111)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Checkout the closest chair.
      question: Checkout the closest chair.
      solution: (safe O1210)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Go to the door in the road.
      question: Go to the door in the road.
      solution: (visited-object O38)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Move to each door in the parking lot.
      question: Move to each door in the parking lot.
      solution: (and (visited-object O47) (visited-object O50))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Go to the box in the parking lot.
      question: Go to the box in the parking lot.
      solution: (visited-object O55)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Inspect the box in the road
      question: Inspect the box in the road
      solution: (safe O395)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Checkout both signs in the parking lot.
      question: Checkout both signs in the parking lot.
      solution: (and (safe O49) (safe O52))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Go to the sign in the road.
      question: Go to the sign in the road.
      solution: (visited-object O42)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Inspect each chair in the field.
      question: Inspect each chair in the field.
      solution: (and (safe O166) (safe O224) (safe O225))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Move to the chair in the footing.
      question: Move to the chair in the footing.
      solution: (visited-object O14)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Checkout each sign in the parking lot.
      question: Checkout each sign in the parking lot.
      solution: (and (safe O49) (safe O52))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Go to the sign on the sidewalk.
      question: Go to the sign on the sidewalk.
      solution: (visited-object O111)
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Inspect all of the boxes.
      question: Inspect all of the boxes.
      solution: (and (safe O39) (safe O55) (safe O395) (safe O397))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: The boxes are unsafe. Secure the area.
      question: The boxes are unsafe. Secure the area.
      solution: (and (safe O39) (safe O55) (safe O395) (safe O397))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: I want to know more about the signs. Inspect them.
      question: I want to know more about the signs. Inspect them.
      solution: (and (safe O26) (safe O42) (safe O45) (safe O49) (safe O52) (safe
        O111))
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: The trash and bag are unsafe. Inspect them.
      question: The trash and bag are unsafe. Inspect them.
      solution: (and (safe O85) (safe O54))
metadata:
  config_name: agentic_cypher_gpt-4.1_pddl_westpoint
  dsg_tag: westpoint
