configurations:
  agentic_cypher_gpt-4.1-nano_pddl_westpoint:
    dsg_interface:
      dsg_interface_type: none
    phases:
      main:
        agent_info:
          max_iterations: 6
          prompt_settings:
            base_prompt:
              answer_formatting_guidance: Use a series of steps to formulate your
                final answer in a chain of thought style. Your final PDDL goal should
                be written between two answer tags, <answer> and </answer>.
              answer_semantic_guidance: null
              in_context_examples: null
              in_context_examples_preamble: null
              novel_instruction: null
              novel_instruction_preamble: 'Now, generate a PDDL goal for this command:'
              novel_instruction_template: '{question}'
              system: 'You are a helpful assistant who is an expert at assigning robots
                PDDL planning goals based on natural language commands grounded in
                3D scene graphs. You have access to a database representing a 3D scene
                graph, which stores spatial information that robot can use to understand
                the world. Given a command, your task is to generate a Cypher query
                that queries the relevant information from the database. Then, use
                this information to formulate a PDDL goal for a robot.

                Labels in Database: - Object: a node representing an object in the
                world. Object Properties: - nodeSymbol: a unique string identifier
                - class: a string identifying the object''s semantic class or type
                - center: the 3D position of the object, as a POINT type - MeshPlace:
                a node representing a 2D segment of space the robot might be able
                to move to. - nodeSymbol: a unique string identifier - class: a string
                identifying the place''s semantic class or type - center: the 3D position
                of the mesh place, as a POINT type - Place: a node representing a
                3D region of free space - nodeSymbol: a unique string identifier -
                center: the 3D position of the place, as a POINT type - Room: a node
                representing a room or higher-level region - nodeSymbol: a unique
                string identifier - center: the 3D position of the room, as a POINT
                type

                Object, MeshPlace, Place, and Room are all Cypher labels attached
                to nodes.

                Places and Mesh Places represent a higher level of the hierarchy compared
                to objects, but lower level than rooms.

                There are two kinds of existing edges. First is (a)-[:CONTAINS]->(b),
                which connects nodes between different layers and means that b is
                contained within a. Nodes in higher levels of the hierarchy may contain
                nodes in lower levels of the hierarchy, but nodes in the lower level
                of the hierarchy will not contain higher-level nodes. The other kind
                of edges represent connectivity within a layer: [:OBJECT_CONNECTED],
                [:PLACE_CONNECTED], [:MESH_PLACE_CONNECTED], [:ROOM_CONNECTED].

                Note that in the current version of cypher, `distance` has been replaced
                by `point.distance`.

                Also, do not use any apoc functions in your queries, because apoc
                is not installed so those queries will crash. Use chain of thought
                to think along the way.

                <PDDL Domain> The PDDL domain consists of the following predicates
                described below. (visited-place ?p): This predicate indicates that
                a robot must visit Place ''?p'' at some point, where ''?p'' is a placeholder
                for a Place ID. (at-place ?p): This predicate indicates that a robot
                must be at Place ''?p'', where ''?p'' is a placeholder for a Place
                ID. (visited-object ?o): This predicate indicates that a robot must
                visit Object ''?o'' at some point, where ''?o'' is a placeholder for
                an Object ID. (at-object ?o): This predicate indicates that a robot
                must be at Object ''?o'', where ''?o'' is a placeholder for an Object
                ID. (visited-region ?r): This predicate indicates that a robot must
                visit Region ''?r'' at some point, where ''?r'' is a placeholder for
                a Region ID. (in-region ?r): This predicate indicates that a robot
                must be at Region ''?r'', where ''?r'' is a placeholder for a Region
                ID. The ''at'' and ''visited'' predicates are useful for specifying
                locations for robots to go.

                (holding ?o): This predicates indicates the a robot must be holding
                an Object ''?o'', where ''?o'' is a placeholder for an Object ID.
                The ''holding'' predicate is useful for specifying that a robot should
                pick up an object.

                (object-in-place ?o ?p): This predicate indicates that an Object ''?o''
                must be located inside a Place ''?p'', where ''?o'' is a placeholder
                for an Object ID and ''?p'' is a placeholder for a Place ID. The ''object-in-place''
                predicate is useful for specifying that a robot should place an object
                somewhere. If the robot should move an object from one place to another,
                you should use the ''object-in-place'' predicate for the goal instead
                of the ''holding'' predicate.

                You can compose PDDL goal predicates into more complex goals using
                the following operators: not: the ''not'' operator negates the truth
                value of the predicate. For example ''(not (visited-place r1))'' means
                Region ''r1'' should not be visited. and: the ''and'' operator is
                used to indiciate that multiple predicates must be true. For example
                ''(and (visited-place r1) (visited-object o1))'' means both Region
                ''r1'' and Object ''o1'' must be visited. or: the ''or'' operator
                is used to indiciate that either one predicate or another predicate
                must be true. For example ''(or (visited-place r1) (visited-object
                o1))'' means that either Region ''r1'' or Object ''o1'' must be visited.
                </PDDL Domain>

                Given a 3D Scene Graph and an instruction, use the provided tool to
                query information from the scene graph. When you have enough information,
                submit your final answer.

                '
              tool_description: null
            output_type: PDDL
            sldp_answer_type_hint: false
          tool_interface: openai
          tools:
          - bound_args:
              dsgdb_conf:
                dsg_interface_type: heracles
                uri: neo4j://127.0.0.1:7687
            name: run_cypher_query
        client:
          client_type: openai
          timeout: 120
        model_info:
          model: gpt-4.1-nano
          seed: null
          temperature: 0.2
    pipeline: agentic
    questions:
    - correctness_comparator:
        comparison_type: PDDL
        relation: equal
      name: Visit Objects Near Point
      question: Visit all objects within 10 meters of x:-100, y:16, z:0?
      solution: (and (visited-object O370) (visited-object O371) (visited-object O372)
        (visited-object O373))
metadata:
  config_name: agentic_cypher_gpt-4.1-nano_pddl_westpoint
  dsg_tag: westpoint
