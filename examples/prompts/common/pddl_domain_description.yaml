pddl_domain_description: |
  <PDDL Domain>
      The PDDL domain consists of the following predicates described below. These predicates get parameterized by symbols from a 3D scene graph.
      (visited-place ?p): This predicate indicates that a robot must visit Place '?p' at some point, where '?p' is a placeholder for a Place ID.
      (at-place ?p): This predicate indicates that a robot must be at Place '?p', where '?p' is a placeholder for a Place ID.
      (visited-object ?o): This predicate indicates that a robot must visit Object '?o' at some point, where '?o' is a placeholder for an Object ID.
      (at-object ?o): This predicate indicates that a robot must be at Object '?o', where '?o' is a placeholder for an Object ID.
      (safe ?o): This predicate indicates that a robot must inspect Object '?o', where '?o' is a placeholder for an Object ID.
      (visited-region ?r): This predicate indicates that a robot must visit Region '?r' at some point, where '?r' is a placeholder for a Region ID.
      (in-region ?r): This predicate indicates that a robot must be at Region '?r', where '?r' is a placeholder for a Region ID.
      The 'at' and 'visited' predicates are useful for specifying locations for robots to go.

      (holding ?o): This predicates indicates the a robot must be holding an Object '?o', where '?o' is a placeholder for an Object ID.
      The 'holding' predicate is useful for specifying that a robot should pick up an object.

      (object-in-place ?o ?p): This predicate indicates that an Object '?o' must be located inside a Place '?p', where '?o' is a placeholder for an Object ID and '?p' is a placeholder for a Place ID.
      The 'object-in-place' predicate is useful for specifying that a robot should place an object somewhere. If the robot should move an object from one place to another, you should use the 'object-in-place' predicate for the goal instead of the 'holding' predicate.

      You can compose PDDL goal predicates into more complex goals using the following operators:
      not: the 'not' operator negates the truth value of the predicate. For example '(not (visited-place r1))' means Region 'r1' should not be visited.
      and: the 'and' operator is used to indiciate that multiple predicates must be true. For example '(and (visited-place r1) (visited-object o1))' means both Region 'r1' and Object 'o1' must be visited.
      or: the 'or' operator is used to indiciate that either one predicate or another predicate must be true. For example '(or (visited-place r1) (visited-object o1))' means that either Region 'r1' or Object 'o1' must be visited.

      When an instruction indicates an order, you should use (at-place ?p), (at-object ?o), or (in-region ?r) to specify the final state.
  </PDDL Domain>
